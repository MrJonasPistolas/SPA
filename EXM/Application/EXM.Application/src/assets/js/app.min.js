"use strict";
function _classCallCheck(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function")
}
function _defineProperties(e, t) {
  for (var n = 0; n < t.length; n++) {
    var a = t[n];
    a.enumerable = a.enumerable || !1,
      a.configurable = !0,
      "value" in a && (a.writable = !0),
      Object.defineProperty(e, a.key, a)
  }
}
function _createClass(e, t, n) {
  return t && _defineProperties(e.prototype, t),
    n && _defineProperties(e, n),
    Object.defineProperty(e, "prototype", {
      writable: !1
    }),
    e
}
function _toConsumableArray(e) {
  return _arrayWithoutHoles(e) || _iterableToArray(e) || _unsupportedIterableToArray(e) || _nonIterableSpread()
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")
}
function _unsupportedIterableToArray(e, t) {
  if (e) {
    if ("string" == typeof e)
      return _arrayLikeToArray(e, t);
    var n = Object.prototype.toString.call(e).slice(8, -1);
    return "Map" === (n = "Object" === n && e.constructor ? e.constructor.name : n) || "Set" === n ? Array.from(e) : "Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n) ? _arrayLikeToArray(e, t) : void 0
  }
}
function _iterableToArray(e) {
  if ("undefined" != typeof Symbol && null != e[Symbol.iterator] || null != e["@@iterator"])
    return Array.from(e)
}
function _arrayWithoutHoles(e) {
  if (Array.isArray(e))
    return _arrayLikeToArray(e)
}
function _arrayLikeToArray(e, t) {
  (null == t || t > e.length) && (t = e.length);
  for (var n = 0, a = new Array(t); n < t; n++)
    a[n] = e[n];
  return a
}
var ThemeCustomizer = function () {
  function e() {
    _classCallCheck(this, e),
      this.html = document.getElementsByTagName("html")[0],
      this.config = {},
      this.defaultConfig = window.config
  }
  return _createClass(e, [{
    key: "initConfig",
    value: function () {
      this.defaultConfig = JSON.parse(JSON.stringify(window.defaultConfig)),
        this.config = JSON.parse(JSON.stringify(window.config)),
        this.setSwitchFromConfig()
    }
  }, {
    key: "changeLeftbarColor",
    value: function (e) {
      this.config.sidenav.color = e,
        this.html.setAttribute("data-sidenav-color", e),
        this.setSwitchFromConfig()
    }
  }, {
    key: "changeLeftbarSize",
    value: function (e) {
      var t = !(1 < arguments.length && void 0 !== arguments[1]) || arguments[1];
      this.html.setAttribute("data-sidenav-size", e),
        t && (this.config.sidenav.size = e,
          this.setSwitchFromConfig())
    }
  }, {
    key: "changeLayoutMode",
    value: function (e) {
      var t = !(1 < arguments.length && void 0 !== arguments[1]) || arguments[1];
      this.html.setAttribute("data-layout-mode", e),
        t && (this.config.layout.mode = e,
          this.setSwitchFromConfig())
    }
  }, {
    key: "changeLayoutPosition",
    value: function (e) {
      this.config.layout.position = e,
        this.html.setAttribute("data-layout-position", e),
        this.setSwitchFromConfig()
    }
  }, {
    key: "changeLayoutColor",
    value: function (e) {
      this.config.theme = e,
        this.html.setAttribute("data-theme", e),
        this.setSwitchFromConfig()
    }
  }, {
    key: "changeTopbarColor",
    value: function (e) {
      this.config.topbar.color = e,
        this.html.setAttribute("data-topbar-color", e),
        this.setSwitchFromConfig()
    }
  }, {
    key: "changeSidebarUser",
    value: function (e) {
      (this.config.sidenav.user = e) ? this.html.setAttribute("data-sidenav-user", e) : this.html.removeAttribute("data-sidenav-user"),
        this.setSwitchFromConfig()
    }
  }, {
    key: "resetTheme",
    value: function () {
      this.config = JSON.parse(JSON.stringify(window.defaultConfig)),
        this.changeLeftbarColor(this.config.sidenav.color),
        this.changeLeftbarSize(this.config.sidenav.size),
        this.changeLayoutColor(this.config.theme),
        this.changeLayoutMode(this.config.layout.mode),
        this.changeLayoutPosition(this.config.layout.position),
        this.changeTopbarColor(this.config.topbar.color),
        this.changeSidebarUser(this.config.sidenav.user),
        this._adjustLayout()
    }
  }, {
    key: "initSwitchListener",
    value: function () {
      var n = this
        , e = (document.querySelectorAll("input[name=data-sidenav-color]").forEach(function (t) {
          t.addEventListener("change", function (e) {
            n.changeLeftbarColor(t.value)
          })
        }),
          document.querySelectorAll("input[name=data-sidenav-size]").forEach(function (t) {
            t.addEventListener("change", function (e) {
              n.changeLeftbarSize(t.value)
            })
          }),
          document.querySelectorAll("input[name=data-theme]").forEach(function (t) {
            t.addEventListener("change", function (e) {
              n.changeLayoutColor(t.value)
            })
          }),
          document.querySelectorAll("input[name=data-layout-mode]").forEach(function (t) {
            t.addEventListener("change", function (e) {
              n.changeLayoutMode(t.value)
            })
          }),
          document.querySelectorAll("input[name=data-layout-position]").forEach(function (t) {
            t.addEventListener("change", function (e) {
              n.changeLayoutPosition(t.value)
            })
          }),
          document.querySelectorAll("input[name=data-layout]").forEach(function (t) {
            t.addEventListener("change", function (e) {
              window.location = "horizontal" === t.value ? "layouts-horizontal.html" : "index.html"
            })
          }),
          document.querySelectorAll("input[name=data-topbar-color]").forEach(function (t) {
            t.addEventListener("change", function (e) {
              n.changeTopbarColor(t.value)
            })
          }),
          document.querySelectorAll("input[name=sidebar-user]").forEach(function (t) {
            t.addEventListener("change", function (e) {
              n.changeSidebarUser(t.checked)
            })
          }),
          document.getElementById("light-dark-mode"))
        , e = (e && e.addEventListener("click", function (e) {
          "light" === n.config.theme ? n.changeLayoutColor("dark") : n.changeLayoutColor("light")
        }),
          document.querySelector("#reset-layout"))
        , e = (e && e.addEventListener("click", function (e) {
          n.resetTheme()
        }),
          document.querySelector(".button-toggle-menu"));
      e && e.addEventListener("click", function () {
        var e = n.config.sidenav.size
          , t = n.html.getAttribute("data-sidenav-size", e);
        "full" !== t ? "condensed" === t ? n.changeLeftbarSize("condensed" == e ? "default" : e, !1) : n.changeLeftbarSize("condensed", !1) : n.showBackdrop(),
          n.html.classList.toggle("sidebar-enable")
      }),
        document.querySelectorAll(".button-sm-hover").forEach(function (e) {
          e.addEventListener("click", function () {
            var e = n.config.sidenav.size
              , t = n.html.getAttribute("data-sidenav-size", e);
            "sm-hover" === e && ("sm-hover-active" === t ? n.changeLeftbarSize("sm-hover", !1) : n.changeLeftbarSize("sm-hover-active", !1))
          })
        })
    }
  }, {
    key: "showBackdrop",
    value: function () {
      var t = document.createElement("div")
        , n = (t.classList = "offcanvas-backdrop fade show",
          document.body.appendChild(t),
          document.body.style.overflow = "hidden",
          window.innerWidth,
          this);
      t.addEventListener("click", function (e) {
        n.html.classList.remove("sidebar-enable"),
          document.body.removeChild(t),
          document.body.style.overflow = null
      })
    }
  }, {
    key: "initWindowSize",
    value: function () {
      var t = this;
      window.addEventListener("resize", function (e) {
        t._adjustLayout()
      })
    }
  }, {
    key: "_adjustLayout",
    value: function () {
      var e = this;
      window.innerWidth <= 750 ? e.changeLeftbarSize("full", !1) : 750 <= window.innerWidth && window.innerWidth <= 1140 ? ("full" !== e.config.sidenav.size && ("sm-hover" === e.config.sidenav.size ? e.changeLeftbarSize("condensed") : e.changeLeftbarSize("condensed", !1)),
        "boxed" === e.config.layout.mode && e.changeLayoutMode("fluid", !1)) : (e.changeLeftbarSize(e.config.sidenav.size),
          e.changeLayoutMode(e.config.layout.mode))
    }
  }, {
    key: "setSwitchFromConfig",
    value: function () {
      sessionStorage.setItem("__EXM_CONFIG__", JSON.stringify(this.config)),
        document.querySelectorAll(".right-bar input[type=checkbox]").forEach(function (e) {
          e.checked = !1
        });
      var e, t, n, a, o, r, i, s, c = this.config;
      c && (e = document.querySelector("input[type=radio][name=data-layout][value=" + c.nav + "]"),
        t = document.querySelector("input[type=radio][name=data-theme][value=" + c.theme + "]"),
        n = document.querySelector("input[type=radio][name=data-layout-mode][value=" + c.layout.mode + "]"),
        a = document.querySelector("input[type=radio][name=data-topbar-color][value=" + c.topbar.color + "]"),
        o = document.querySelector("input[type=radio][name=data-sidenav-color][value=" + c.sidenav.color + "]"),
        r = document.querySelector("input[type=radio][name=data-sidenav-size][value=" + c.sidenav.size + "]"),
        i = document.querySelector("input[type=radio][name=data-layout-position][value=" + c.layout.position + "]"),
        s = document.querySelector("input[type=checkbox][name=sidebar-user]"),
        e && (e.checked = !0),
        t && (t.checked = !0),
        n && (n.checked = !0),
        a && (a.checked = !0),
        o && (o.checked = !0),
        r && (r.checked = !0),
        i && (i.checked = !0),
        s && "true" === c.sidenav.user.toString() && (s.checked = !0))
    }
  }, {
    key: "init",
    value: function () {
      this.initConfig(),
        this.initSwitchListener(),
        this.initWindowSize(),
        this._adjustLayout(),
        this.setSwitchFromConfig()
    }
  }]),
    e
}();
